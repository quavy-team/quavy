datasource db {
    provider             = "mysql"
    url                  = env("DATABASE_URL")
    referentialIntegrity = "prisma"
}

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["referentialIntegrity"]
}

model Account {
    id                String  @id @default(uuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@map("accounts")
}

model User {
    id            String    @id @default(uuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    admin         Boolean   @default(false)
    pro           Boolean   @default(false)

    profile     Profile?
    credentials Credentials?
    accounts    Account[]
    drafts      Draft[]
    mentions    Song[]       @relation("mentions")
    favorites   Song[]       @relation("favorites")

    @@map("users")
}

model Credentials {
    userId   String @id
    username String @unique
    password String

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("credentials")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
    @@map("verification_tokens")
}

model Profile {
    id       String  @id // slug
    name     String  @unique
    userId   String  @unique
    verified Boolean @default(false)

    songs Song[]
    user  User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("profiles")
}

model Song {
    id     String @id @default(uuid())
    // path    Json   @unique // [autor, titulo]
    title  String
    chords Json
    lyrics Json

    authors   Profile[]
    mentions  User[]    @relation("mentions")
    favorites User[]    @relation("favorites")

    @@map("songs")
}

model Draft {
    id        String   @id @default(uuid())
    userId    String
    title     String
    authors   Json
    chords    Json
    lyrics    Json
    updatedAt DateTime @updatedAt
    createdAt DateTime @default(now())
    submitted Boolean  @default(false)
    published Boolean  @default(false)

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("drafts")
}
